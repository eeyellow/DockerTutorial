version: '3'

services:

  express:
    build: ./express
    container_name: ${APP_NAME}_express
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    entrypoint: npm run start
    volumes:
      - ./express/app:/app
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
    networks:
      - app-network

  postgres:
    image: postgres
    container_name: ${APP_NAME}_postgres
    restart: always
    user: "1000"
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    networks:
      - app-network
    logging:
      driver: none 

  pgadmin:
    image: dpage/pgadmin4
    container_name: ${APP_NAME}_pgadmin
    restart: "always"
    user: root
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_USERNAME}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    volumes:
      - ./pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - app-network
    logging:
      driver: none

  portainer:
    image: portainer/portainer-ce:alpine
    container_name: portainer
    command: -H unix:///var/run/docker.sock
    ports:
      - "9000:9000"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./portainer:/data"
    restart: always
    networks:
      - app-network
    logging:
      driver: none

networks:
  app-network:
    driver: bridge
